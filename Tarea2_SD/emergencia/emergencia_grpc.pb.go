// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: emergencia.proto

package emergencia

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Asignador_EnviarEmergencias_FullMethodName = "/emergencia.Asignador/EnviarEmergencias"
)

// AsignadorClient is the client API for Asignador service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AsignadorClient interface {
	EnviarEmergencias(ctx context.Context, in *EmergenciasRequest, opts ...grpc.CallOption) (*Respuesta, error)
}

type asignadorClient struct {
	cc grpc.ClientConnInterface
}

func NewAsignadorClient(cc grpc.ClientConnInterface) AsignadorClient {
	return &asignadorClient{cc}
}

func (c *asignadorClient) EnviarEmergencias(ctx context.Context, in *EmergenciasRequest, opts ...grpc.CallOption) (*Respuesta, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Respuesta)
	err := c.cc.Invoke(ctx, Asignador_EnviarEmergencias_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsignadorServer is the server API for Asignador service.
// All implementations must embed UnimplementedAsignadorServer
// for forward compatibility.
type AsignadorServer interface {
	EnviarEmergencias(context.Context, *EmergenciasRequest) (*Respuesta, error)
	mustEmbedUnimplementedAsignadorServer()
}

// UnimplementedAsignadorServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAsignadorServer struct{}

func (UnimplementedAsignadorServer) EnviarEmergencias(context.Context, *EmergenciasRequest) (*Respuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarEmergencias not implemented")
}
func (UnimplementedAsignadorServer) mustEmbedUnimplementedAsignadorServer() {}
func (UnimplementedAsignadorServer) testEmbeddedByValue()                   {}

// UnsafeAsignadorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AsignadorServer will
// result in compilation errors.
type UnsafeAsignadorServer interface {
	mustEmbedUnimplementedAsignadorServer()
}

func RegisterAsignadorServer(s grpc.ServiceRegistrar, srv AsignadorServer) {
	// If the following call pancis, it indicates UnimplementedAsignadorServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Asignador_ServiceDesc, srv)
}

func _Asignador_EnviarEmergencias_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmergenciasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsignadorServer).EnviarEmergencias(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asignador_EnviarEmergencias_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsignadorServer).EnviarEmergencias(ctx, req.(*EmergenciasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Asignador_ServiceDesc is the grpc.ServiceDesc for Asignador service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Asignador_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emergencia.Asignador",
	HandlerType: (*AsignadorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnviarEmergencias",
			Handler:    _Asignador_EnviarEmergencias_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emergencia.proto",
}

const (
	Dron_AtenderEmergencia_FullMethodName = "/emergencia.Dron/AtenderEmergencia"
)

// DronClient is the client API for Dron service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DronClient interface {
	AtenderEmergencia(ctx context.Context, in *EmergenciaAsignada, opts ...grpc.CallOption) (*Respuesta, error)
}

type dronClient struct {
	cc grpc.ClientConnInterface
}

func NewDronClient(cc grpc.ClientConnInterface) DronClient {
	return &dronClient{cc}
}

func (c *dronClient) AtenderEmergencia(ctx context.Context, in *EmergenciaAsignada, opts ...grpc.CallOption) (*Respuesta, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Respuesta)
	err := c.cc.Invoke(ctx, Dron_AtenderEmergencia_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DronServer is the server API for Dron service.
// All implementations must embed UnimplementedDronServer
// for forward compatibility.
type DronServer interface {
	AtenderEmergencia(context.Context, *EmergenciaAsignada) (*Respuesta, error)
	mustEmbedUnimplementedDronServer()
}

// UnimplementedDronServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDronServer struct{}

func (UnimplementedDronServer) AtenderEmergencia(context.Context, *EmergenciaAsignada) (*Respuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AtenderEmergencia not implemented")
}
func (UnimplementedDronServer) mustEmbedUnimplementedDronServer() {}
func (UnimplementedDronServer) testEmbeddedByValue()              {}

// UnsafeDronServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DronServer will
// result in compilation errors.
type UnsafeDronServer interface {
	mustEmbedUnimplementedDronServer()
}

func RegisterDronServer(s grpc.ServiceRegistrar, srv DronServer) {
	// If the following call pancis, it indicates UnimplementedDronServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Dron_ServiceDesc, srv)
}

func _Dron_AtenderEmergencia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmergenciaAsignada)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DronServer).AtenderEmergencia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dron_AtenderEmergencia_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DronServer).AtenderEmergencia(ctx, req.(*EmergenciaAsignada))
	}
	return interceptor(ctx, in, info, handler)
}

// Dron_ServiceDesc is the grpc.ServiceDesc for Dron service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dron_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emergencia.Dron",
	HandlerType: (*DronServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AtenderEmergencia",
			Handler:    _Dron_AtenderEmergencia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emergencia.proto",
}

const (
	Monitoreo_StreamMensajes_FullMethodName = "/emergencia.Monitoreo/StreamMensajes"
)

// MonitoreoClient is the client API for Monitoreo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MonitoreoClient interface {
	StreamMensajes(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MensajeMonitoreo], error)
}

type monitoreoClient struct {
	cc grpc.ClientConnInterface
}

func NewMonitoreoClient(cc grpc.ClientConnInterface) MonitoreoClient {
	return &monitoreoClient{cc}
}

func (c *monitoreoClient) StreamMensajes(ctx context.Context, in *Vacio, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MensajeMonitoreo], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Monitoreo_ServiceDesc.Streams[0], Monitoreo_StreamMensajes_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Vacio, MensajeMonitoreo]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Monitoreo_StreamMensajesClient = grpc.ServerStreamingClient[MensajeMonitoreo]

// MonitoreoServer is the server API for Monitoreo service.
// All implementations must embed UnimplementedMonitoreoServer
// for forward compatibility.
type MonitoreoServer interface {
	StreamMensajes(*Vacio, grpc.ServerStreamingServer[MensajeMonitoreo]) error
	mustEmbedUnimplementedMonitoreoServer()
}

// UnimplementedMonitoreoServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMonitoreoServer struct{}

func (UnimplementedMonitoreoServer) StreamMensajes(*Vacio, grpc.ServerStreamingServer[MensajeMonitoreo]) error {
	return status.Errorf(codes.Unimplemented, "method StreamMensajes not implemented")
}
func (UnimplementedMonitoreoServer) mustEmbedUnimplementedMonitoreoServer() {}
func (UnimplementedMonitoreoServer) testEmbeddedByValue()                   {}

// UnsafeMonitoreoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MonitoreoServer will
// result in compilation errors.
type UnsafeMonitoreoServer interface {
	mustEmbedUnimplementedMonitoreoServer()
}

func RegisterMonitoreoServer(s grpc.ServiceRegistrar, srv MonitoreoServer) {
	// If the following call pancis, it indicates UnimplementedMonitoreoServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Monitoreo_ServiceDesc, srv)
}

func _Monitoreo_StreamMensajes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Vacio)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MonitoreoServer).StreamMensajes(m, &grpc.GenericServerStream[Vacio, MensajeMonitoreo]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Monitoreo_StreamMensajesServer = grpc.ServerStreamingServer[MensajeMonitoreo]

// Monitoreo_ServiceDesc is the grpc.ServiceDesc for Monitoreo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Monitoreo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "emergencia.Monitoreo",
	HandlerType: (*MonitoreoServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMensajes",
			Handler:       _Monitoreo_StreamMensajes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "emergencia.proto",
}
